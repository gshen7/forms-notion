{"version":3,"sources":["serviceWorker.js","index.js","Home.js","App.js","Submitted.js","Create.js","Created.js","About.js","NoForm.js","NoMatch.js"],"names":["Boolean","window","location","hostname","match","routing","exact","path","component","className","target","rel","to","useState","heading","setHeading","description","setDescription","questions","setQuestions","submitError","setSubmitError","submitting","setSubmitting","loaded","setLoaded","form_id","useParams","history","useHistory","handleFieldInput","value","index","question","slice","useEffect","fetch","then","res","status","json","data","document","title","push","displayDescription","map","key","field","type","TextField","fullWidth","margin","onChange","e","label","mandatory","variant","FormControlLabel","control","Switch","checked","color","labelPlacement","FormControl","InputLabel","id","Select","MenuItem","options","option","multiple","input","Input","renderValue","selected","Chip","Checkbox","indexOf","ListItemText","primary","Button","onClick","method","headers","body","JSON","stringify","submit","self","formPath","state","formHeading","setFormHeading","user","setUser","pass","setPass","responseDb","setResponseDb","createError","setCreateError","creating","setCreating","form_heading","notion_db","create","base","host","setFormPath","formsDb","setFormsDb","fieldsDb","setFieldsDb","forms_db","fields_db","href","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69ee77d1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport Submitted from './Submitted'\nimport Home from './Home';\nimport Create from './Create'\nimport Created from './Created'\nimport About from './About'\nimport NoForm from './NoForm'\nimport NoMatch from './NoMatch'\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/form/:form_id\" component={App} />\n      <Route exact path=\"/submitted\" component={Submitted} />\n      <Route exact path=\"/create\" component={Create} />\n      <Route exact path=\"/created\" component={Created} />\n      <Route exact path=\"/about\" component={About} />\n      <Route exact path=\"/no-form\" component={NoForm} />\n      <Route exact component={NoMatch} />\n    </Switch>\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './styles.css';\nimport { Link } from 'react-router-dom'\n\nexport default function Home() {\n    return (\n        <div className=\"Container\">\n            <h1>Notion Forms</h1>\n            <p><Link target=\"_blank\" rel=\"noopener noreferrer\" to='/form/5ee8e0606b5647fed80c522f'>Join the waitlist to start creating your own forms as soon as possible</Link></p>\n            <p><Link to='/create'>Create a form (account required)</Link></p>\n            <p><Link target=\"_blank\" rel=\"noopener noreferrer\" to='/form/5eed12b343af73792c5b0a10'>Let us know what you think of Notion Forms</Link></p>\n            <p><Link to='/about'>About</Link></p>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Button, \n  TextField, \n  Switch, \n  FormControl, \n  InputLabel, \n  Chip, \n  Select, \n  Input,\n  Checkbox,\n  ListItemText,\n  MenuItem, \n  FormControlLabel } from \"@material-ui/core\";\nimport './styles.css';\n\nexport default function App() {\n  const [heading, setHeading] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [submitError, setSubmitError] = useState(\"\");\n  const [submitting, setSubmitting] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  let {form_id} = useParams()\n  const history = useHistory()\n\n  const submit = (history) => {\n    setSubmitting(true)\n    setSubmitError(\"\")\n    let options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(questions)\n    }\n    fetch(`/api/submitToForm/${form_id}`, options).then((res) => {\n      if (res.status === 200) {\n        history.push('/submitted', { form_id: form_id })\n      } else {\n        setSubmitting(false)\n        setSubmitError(\"Could not submit form, check that all mandatory fields are included\")\n      }\n    })\n  };\n\n  const handleFieldInput = (value, index) => {\n    let question = questions[index]\n    question.value = value\n    setQuestions([\n      ...questions.slice(0,index),\n      question,\n      ...questions.slice(index+1)\n    ])\n    setSubmitError(\"\")\n  }\n\n  useEffect(() => {\n    fetch(`/api/getFormForDisplay/${form_id}`).then(res => {\n      if (res.status === 200) {\n        return res.json().then(data => {\n          setHeading(data.heading)\n          setDescription(data.description)\n          setQuestions(data.questions)\n          setLoaded(true)\n          document.title = data.heading ? data.heading : \"Form\"\n        });\n      } else {\n        history.push('/no-form')\n      }\n    })\n  }, [form_id, history]);\n\n  let displayDescription = description ? (<p>{description}</p>) : \"\"\n\n  return (\n    <div className=\"Container\">\n      <h1>{heading ? heading : \"Loading...\"}</h1>\n      {displayDescription}\n      {questions.map( (question, index) => (\n        <div className=\"UserInput\" key={question.field}>\n          {question.type === 'title' || question.type === 'text' ? <TextField\n            fullWidth\n            margin=\"normal\"\n            onChange={e => handleFieldInput(e.target.value, index)}\n            value={question.value ? question.value : \"\"}\n            label={(question.mandatory ? \"* \" : \" \") + question.question}\n            variant=\"outlined\"\n          /> : question.type === 'checkbox' ? <FormControlLabel \n            control={<Switch \n              value={question.value ? question.value : false}\n              onChange={e => handleFieldInput(e.target.checked, index)}\n              color=\"secondary\"\n            />}\n            label={(question.mandatory ? \"* \" : \" \") + question.question}\n            labelPlacement=\"start\"\n            /> : question.type === 'select' ? <FormControl variant=\"outlined\">\n                <InputLabel id={question.field + \"-select-label\"}>{(question.mandatory ? \"* \" : \" \") + question.question}</InputLabel>\n                <Select\n                  id={question.field + \"-select\"}\n                  value={question.value ? question.value : \"\"}\n                  onChange={e => handleFieldInput(e.target.value, index)}\n                  // label={(question.mandatory ? \"* \" : \" \") + question.question}\n                >\n                  <MenuItem value=\"\">\n                    <em>None</em>\n                  </MenuItem>\n                  {question.options.map( (option) => (\n                    <MenuItem value={option}>{option}</MenuItem>\n                  ))}\n              </Select>\n              </FormControl> : question.type === 'multi_select' ? <FormControl variant=\"outlined\">\n                <InputLabel id={question.field + \"-multi-select-label\"}>{(question.mandatory ? \"* \" : \" \") + question.question}</InputLabel>\n                <Select\n                  multiple\n                  id={question.field + \"-multi-select\"}\n                  value={question.value ? question.value : \"\"}\n                  onChange={e => handleFieldInput(e.target.value, index)}\n                  input={<Input id={question.field + \"-multi-select-chip\"}/>}\n                  renderValue={(selected) => (\n                    <div className=\"chips\">\n                      {selected.map((value) => (\n                        <Chip key={value} label={value} className=\"chip\"/>\n                      ))}\n                    </div>\n                  )}\n                  // MenuProps={MenuProps}\n                  // label={(question.mandatory ? \"* \" : \" \") + question.question}\n                >\n                  {question.options.map((option) => (\n                    <MenuItem key={option} value={option}>\n                      <Checkbox checked={question.value ? question.value.indexOf(option) > -1 : false} />\n                      <ListItemText primary={option} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl> : \"\"}\n        </div>\n      ))}\n      <br/>\n      <p>{submitError}</p>\n      <div className=\"UserInput\" >\n        {loaded ? <Button\n          variant=\"contained\"\n          color=\"default\"\n          onClick={() => submit(history)}\n        >\n          <h2>{submitting ? \"Submitting...\" : \"Submit\"}</h2>\n        </Button> : \"\"}\n      </div>\n    </div>\n  );\n}","import React, { useEffect }from 'react';\nimport './styles.css';\nimport { Link } from 'react-router-dom'\n\n\nexport default function Submitted(self) {\n    useEffect(() => {\n        document.title = \"Response Submitted\"\n    }, []);\n\n    let formPath = `/form/${self.location.state.form_id}`\n    return (\n        <div className=\"Container\">\n            <h1>Your response has been recorded.</h1>\n            <p><Link to={formPath}>Submit another response</Link></p>\n        </div>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport './styles.css';\nimport { Button, TextField } from \"@material-ui/core\";\n\nexport default function Create() {\n    const [formHeading, setFormHeading] = useState(\"\");\n    const [user, setUser] = useState(\"\");\n    const [pass, setPass] = useState(\"\");\n    const [responseDb, setResponseDb] = useState(\"\");\n    const [createError, setCreateError] = useState(\"\");\n    const [creating, setCreating] = useState(false);\n    const history = useHistory()\n\n    useEffect(() => {\n        document.title = \"Create Form\"\n    }, []);\n\n    const create = (history) => {\n        setCreating(true)\n        setCreateError(\"\")\n        let body = {\n            form_heading:formHeading,\n            user:user,\n            pass:pass,\n            notion_db:responseDb\n        }\n        let options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        }\n        fetch(`/api/createForm`, options).then(res => {\n            if (res.status === 200) {\n                res.json().then(data => {\n                    history.push('/created', { form_id: data.id, notion_db: responseDb })\n                })\n            } else if (res.status === 401) {\n                setCreating(false)\n                setCreateError(\"Could not create form, username and password were not found. If you do not have a username and password, join the waitlist. Otherwise, try again or contact me if you're unable to use your account.\")\n            } else {\n                setCreating(false)\n                setCreateError(\"Could not create form, check that all fields are included and links to notion are valid.\")\n            }\n        })\n    };\n\n    const handleFormHeadingInput = (value) => {\n        setFormHeading(value)\n        setCreateError(\"\")\n    }\n\n    const handleUserInput = (value) => {\n        setUser(value)\n        setCreateError(\"\")\n    }\n\n    const handlePassInput = (value) => {\n        setPass(value)\n        setCreateError(\"\")\n    }\n\n    const handleResponseDbInput = (value) => {\n        setResponseDb(value)\n        setCreateError(\"\")\n    }\n\n    return (\n        <div className=\"Container\">\n            <h1>Create Form</h1>\n            <div>\n                <p><Link target=\"_blank\" rel=\"noopener noreferrer\" to='/form/5ee8e0606b5647fed80c522f'>If you don't have an account, join the waitlist to start creating your own forms as soon as possible</Link></p>\n                <p><Link target=\"_blank\" rel=\"noopener noreferrer\" to='/form/5eed12b343af73792c5b0a10'>Let us know if you're enjoying Notion Forms or how we can improve</Link></p>\n                <p><Link to='/'>Cancel and go back to home</Link></p>\n            </div>\n            <div>\n                <TextField\n                    fullWidth\n                    margin=\"normal\"\n                    onChange={e => handleUserInput(e.target.value)}\n                    value={user}\n                    label=\"* Username\"\n                    variant=\"outlined\"\n                />\n            </div>\n            <div>\n                <TextField\n                    fullWidth\n                    margin=\"normal\"\n                    onChange={e => handlePassInput(e.target.value)}\n                    value={pass}\n                    label=\"* Password\"\n                    type=\"password\"\n                    variant=\"outlined\"\n                />\n            </div>\n            <div>\n                <TextField\n                    fullWidth\n                    margin=\"normal\"\n                    onChange={e => handleFormHeadingInput(e.target.value)}\n                    value={formHeading}\n                    label=\"* Form Heading\"\n                    variant=\"outlined\"\n                />\n            </div>\n            <div>\n                <TextField\n                    fullWidth\n                    margin=\"normal\"\n                    onChange={e => handleResponseDbInput(e.target.value)}\n                    value={responseDb}\n                    label=\"* Link to Response DB\"\n                    variant=\"outlined\"\n                />\n            </div>\n            <br />\n            <p>{createError}</p>\n            <div>\n                <Button\n                    variant=\"contained\"\n                    color=\"default\"\n                    onClick={() => create(history)}\n                >\n                    <h2>{creating ? \"Creating...\" : \"Create\"}</h2>\n                </Button>\n            </div>\n            \n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport { Link } from 'react-router-dom'\n\nexport default function Created(self) {\n    let base = window.location.host\n    const [formPath, setFormPath] = useState(\"\");\n    const [formsDb, setFormsDb] = useState(\"\");\n    const [fieldsDb, setFieldsDb] = useState(\"\");\n    const [responseDb, setResponseDb] = useState(\"\");\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        document.title = \"Form Created\"\n        fetch(`/api/getForm/${self.location.state.form_id}`).then(res => res.json()).then(data => {\n            setFormsDb(`${data.forms_db}`)\n            setFieldsDb(`${data.fields_db}`)\n            setResponseDb(`${self.location.state.notion_db}`)\n            setFormPath(`/form/${self.location.state.form_id}`)\n            setLoaded(true)\n        });\n    }, [self.location.state.form_id, self.location.state.notion_db]);\n\n    return (\n        <div className=\"Container\">\n            <h1>{loaded ? 'Your form has been created' : \"Finishing up...\"}</h1>\n            {loaded ? <div>\n                <p>Your form is live at: <Link target=\"_blank\" rel=\"noopener noreferrer\" to={formPath}>{base}{formPath}</Link></p>\n                <p>Your form will send responses to: <a target=\"_blank\" rel=\"noopener noreferrer\" href={responseDb}>this notion collection</a></p>\n                <p>You can edit your form using: <a target=\"_blank\" rel=\"noopener noreferrer\" href={formsDb}>your forms notion collection</a> and <a target=\"_blank\" rel=\"noopener noreferrer\" href={fieldsDb}>your fields notion collection</a></p>\n                <p><Link target=\"_blank\" rel=\"noopener noreferrer\" to='/form/5eed12b343af73792c5b0a10'>Let us know about your experience creating a form with Notion Forms</Link></p>\n                <p><Link to='/'>Back to home</Link></p>\n            </div> : \"\"}\n        </div>\n    );\n}","import React from 'react';\nimport './styles.css';\nimport { Link } from 'react-router-dom'\n\nexport default function About() {\n    return (\n        <div className=\"Container\">\n            <h1>Notion Forms</h1>\n            <p>With Notion Forms, you can create and manage forms that submit responses directly into your Notion databases. You will be able to manage your forms using your own Notion databases.</p>\n            <p>Currently we support forms with text/title, checkbox, select, and multi select fields.</p>\n            <p><Link to='/'>Back to home</Link></p>\n        </div>\n    );\n}","import React from 'react';\nimport './styles.css';\nimport { Link } from 'react-router-dom'\n\nexport default function NoForm() {\n    return (\n        <div className=\"Container\">\n            <h1>Notion Forms</h1>\n            <p>The form you're looking for wasn't found.</p>\n            <p><Link to='/'>Back to home</Link></p>\n        </div>\n    );\n}","import React from 'react';\nimport './styles.css';\nimport { Link } from 'react-router-dom'\n\nexport default function NoMatch() {\n    return (\n        <div className=\"Container\">\n            <h1>Notion Forms</h1>\n            <p>The page you're looking for wasn't found.</p>\n            <p><Link to='/'>Back to home</Link></p>\n        </div>\n    );\n}"],"sourceRoot":""}